// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;

using ABI.API.Structure.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ABI.API.Structure.Infrastructure.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(StructureContext))]
    partial class StructureContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureArista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("arista_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotiveStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("motivo_estado_id");

                    b.Property<int>("NodeIdFrom")
                        .HasColumnType("int")
                        .HasColumnName("nodo_id_desde");

                    b.Property<int>("NodeIdTo")
                        .HasColumnType("int")
                        .HasColumnName("nodo_id_hasta");

                    b.Property<int>("StructureIdFrom")
                        .HasColumnType("int")
                        .HasColumnName("estructura_id_desde");

                    b.Property<int>("StructureIdTo")
                        .HasColumnType("int")
                        .HasColumnName("estructura_id_hasta");

                    b.Property<int>("TypeRelationshipId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_relacion_id");

                    b.Property<DateTimeOffset>("ValidityFrom")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("arista_vigencia_desde");

                    b.Property<DateTimeOffset>("ValidityTo")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("arista_vigencia_hasta");

                    b.HasKey("Id");

                    b.HasIndex("MotiveStateId");

                    b.HasIndex("NodeIdFrom");

                    b.HasIndex("NodeIdTo");

                    b.HasIndex("StructureIdFrom");

                    b.HasIndex("StructureIdTo");

                    b.HasIndex("TypeRelationshipId");

                    b.ToTable("Arista", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureClientNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nodo_cliente_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cliente_id");

                    b.Property<string>("ClientState")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("cliente_estado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cliente_nombre");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("nodo_id");

                    b.Property<DateTimeOffset>("ValidityFrom")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("nodo_cliente_vigencia_desde");

                    b.Property<DateTimeOffset>("ValidityTo")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("nodo_cliente_vigencia_hasta");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Nodo_Cliente", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("estructura_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estructura_codigo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estructura_nombre");

                    b.Property<int?>("RootNodeId")
                        .HasColumnType("int")
                        .HasColumnName("nodo_raiz_id");

                    b.Property<int>("StructureModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelo_estructura_id");

                    b.Property<DateTimeOffset?>("ValidityFrom")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("estructura_vigencia_desde");

                    b.HasKey("Id");

                    b.HasIndex("RootNodeId");

                    b.HasIndex("StructureModelId");

                    b.ToTable("Estructura", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nodo_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("nodo_codigo");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("nivel_id");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Nodo", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNodeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nodo_definicion_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("nodo_activo");

                    b.Property<int?>("AttentionModeId")
                        .HasColumnType("int")
                        .HasColumnName("modo_atencion_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("empleado_id");

                    b.Property<int>("MotiveStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("motivo_estado_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nodo_nombre");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("nodo_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.Property<int?>("SaleChannelId")
                        .HasColumnType("int")
                        .HasColumnName("canal_venta_id");

                    b.Property<bool?>("VacantPerson")
                        .HasColumnType("bit")
                        .HasColumnName("nodo_definicion_persona_vacante");

                    b.Property<DateTimeOffset>("ValidityFrom")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("nodo_definicion_vigencia_desde");

                    b.Property<DateTimeOffset>("ValidityTo")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("nodo_definicion_vigencia_hasta");

                    b.HasKey("Id");

                    b.HasIndex("AttentionModeId");

                    b.HasIndex("MotiveStateId");

                    b.HasIndex("NodeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SaleChannelId");

                    b.ToTable("Nodo_Definicion", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.AttentionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("modo_atencion_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("modo_atencion_activo");

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("modo_atencion_descripcion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modo_atencion_nombre");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("modo_atencion_nombre_corto");

                    b.HasKey("Id");

                    b.ToTable("Modo_Atencion", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.AttentionModeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("modo_atencion_rol_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttentionModeId")
                        .HasColumnType("int")
                        .HasColumnName("modo_atencion_id");

                    b.Property<bool>("EsResponsable")
                        .HasColumnType("bit")
                        .HasColumnName("modo_atencion_rol_responsable");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.HasKey("Id");

                    b.HasIndex("AttentionModeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Modo_Atencion_Rol", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.ChangeTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedValueJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("seguimiento_cambio_atributo_valor");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("seguimiento_cambio_fecha");

                    b.Property<int>("IdChangeType")
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_id_tipo_cambio");

                    b.Property<int>("IdDestino")
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_id_destino");

                    b.Property<int>("IdObjectType")
                        .HasColumnType("int")
                        .HasColumnName("tipo_id");

                    b.Property<int>("IdOrigen")
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_id_origen");

                    b.Property<int>("IdStructure")
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_estructura_id");

                    b.Property<string>("NodePathJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("seguimiento_cambio_ruta_nodo");

                    b.Property<string>("UserJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("seguimiento_cambio_usuario");

                    b.Property<DateTimeOffset>("ValidityFrom")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("seguimiento_cambio_vigencia");

                    b.HasKey("Id");

                    b.HasIndex("IdObjectType");

                    b.HasIndex("IdStructure");

                    b.ToTable("Seguimiento_Cambio", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.ChangeTrackingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_estado_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("seguimiento_cambio_estado_fecha_hora");

                    b.Property<int>("IdChangeTracking")
                        .HasColumnType("int")
                        .HasColumnName("seguimiento_cambio_id");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("estado_id");

                    b.HasKey("Id");

                    b.HasIndex("IdChangeTracking");

                    b.HasIndex("IdStatus");

                    b.ToTable("Seguimiento_Cambio_Estado", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pais_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("pais_codigo_iso_3166_1_alfa2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pais_nombre");

                    b.HasKey("Id");

                    b.ToTable("Pais", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nivel_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("nivel_activo");

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("nivel_descripcion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nivel_nombre");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("nivel_nombre_corto");

                    b.HasKey("Id");

                    b.ToTable("Nivel", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.MostVisitedFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("filtro_mas_visitado_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("filtro_mas_visitado_descripcion");

                    b.Property<int>("FilterType")
                        .HasColumnType("int")
                        .HasColumnName("filtro_mas_visitado_tipo_filtro");

                    b.Property<int>("IdValue")
                        .HasColumnType("int")
                        .HasColumnName("filtro_mas_visitado_id_valor");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("filtro_mas_visitado_cantidad");

                    b.Property<int>("StructureId")
                        .HasColumnType("int")
                        .HasColumnName("filtro_mas_visitado_estructura_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("filtro_mas_visitado_id_usuario");

                    b.HasKey("Id");

                    b.ToTable("Filtro_Mas_Visitado", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Motive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("motivo_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("motivo_nombre");

                    b.HasKey("Id");

                    b.ToTable("Motivo", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.MotiveState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("motivo_estado_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotiveId")
                        .HasColumnType("int")
                        .HasColumnName("motivo_id");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("estado_id");

                    b.HasKey("Id");

                    b.HasIndex("MotiveId");

                    b.HasIndex("StateId");

                    b.ToTable("Motivo_Estado", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("objeto_tipo_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("objeto_tipo_nombre");

                    b.HasKey("Id");

                    b.ToTable("Objeto_Tipo", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rol_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("rol_activo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rol_nombre");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("rol_nombre_corto");

                    b.Property<string>("Tags")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rol_etiquetas");

                    b.HasKey("Id");

                    b.ToTable("Rol", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.SaleChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("canal_venta_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("canal_venta_activo");

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("canal_venta_descripcion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("canal_venta_nombre");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("canal_venta_nombre_corto");

                    b.HasKey("Id");

                    b.ToTable("Canal_Venta", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("estado_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estado_nombre");

                    b.Property<int>("StateGroupId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_estado_id");

                    b.HasKey("Id");

                    b.HasIndex("StateGroupId");

                    b.ToTable("Estado", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StateGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("grupo_estado_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("grupo_estado_nombre");

                    b.HasKey("Id");

                    b.ToTable("Grupo_Estado", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StructureModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("modelo_estructura_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("modelo_estructura_activo");

                    b.Property<bool>("CanBeExportedToTruck")
                        .HasColumnType("bit")
                        .HasColumnName("modelo_estructura_exportar_truck");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("modelo_estructura_codigo");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("pais_id");

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("modelo_estructura_descripcion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modelo_estructura_nombre");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("modelo_estructura_nombre_corto");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Modelo_Estructura", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StructureModelDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("modelo_estructura_definicion_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAttentionModeRequired")
                        .HasColumnType("bit")
                        .HasColumnName("modelo_estructura_tiene_modo_atencion");

                    b.Property<bool>("IsSaleChannelRequired")
                        .HasColumnType("bit")
                        .HasColumnName("modelo_estructura_tiene_canal_venta");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("nivel_id");

                    b.Property<int?>("ParentLevelId")
                        .HasColumnType("int")
                        .HasColumnName("padre_nivel_id");

                    b.Property<int>("StructureModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelo_estructura_id");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("ParentLevelId");

                    b.HasIndex("StructureModelId");

                    b.ToTable("Modelo_Estructura_Definicion", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tipo_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipo_codigo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tipo_nombre");

                    b.Property<int>("TypeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_tipo_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeGroupId");

                    b.ToTable("Tipo", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.TypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("grupo_tipo_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("grupo_tipo_nombre");

                    b.HasKey("Id");

                    b.ToTable("Grupo_Tipo", "dbo");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureArista", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.MotiveState", "MotiveState")
                        .WithMany("StructureAristas")
                        .HasForeignKey("MotiveStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", "NodeFrom")
                        .WithMany("AristasFrom")
                        .HasForeignKey("NodeIdFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", "NodeTo")
                        .WithMany("AristasTo")
                        .HasForeignKey("NodeIdTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureDomain", "StructureFrom")
                        .WithMany("AristaFrom")
                        .HasForeignKey("StructureIdFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureDomain", "StructureTo")
                        .WithMany("AristaTo")
                        .HasForeignKey("StructureIdTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.Entities.Type", "TypeRelationship")
                        .WithMany("StructureArista")
                        .HasForeignKey("TypeRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MotiveState");

                    b.Navigation("NodeFrom");

                    b.Navigation("NodeTo");

                    b.Navigation("StructureFrom");

                    b.Navigation("StructureTo");

                    b.Navigation("TypeRelationship");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureClientNode", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", "Node")
                        .WithMany("StructureClientNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureDomain", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", "Node")
                        .WithMany("Structures")
                        .HasForeignKey("RootNodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ABI.API.Structure.Domain.Entities.StructureModel", "StructureModel")
                        .WithMany("Structures")
                        .HasForeignKey("StructureModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("StructureModel");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.Level", "Level")
                        .WithMany("StructureNodos")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNodeDefinition", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.AttentionMode", "AttentionMode")
                        .WithMany("StructureNodoDefinitions")
                        .HasForeignKey("AttentionModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ABI.API.Structure.Domain.Entities.MotiveState", "MotiveState")
                        .WithMany("StructureNodoDefinitions")
                        .HasForeignKey("MotiveStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", "Node")
                        .WithMany("StructureNodoDefinitions")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.Entities.Role", "Role")
                        .WithMany("StructureNodoDefinitions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ABI.API.Structure.Domain.Entities.SaleChannel", "SaleChannel")
                        .WithMany("StructureNodoDefinitions")
                        .HasForeignKey("SaleChannelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AttentionMode");

                    b.Navigation("MotiveState");

                    b.Navigation("Node");

                    b.Navigation("Role");

                    b.Navigation("SaleChannel");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.AttentionModeRole", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.AttentionMode", "AttentionMode")
                        .WithMany("AttentionModeRoles")
                        .HasForeignKey("AttentionModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ABI.API.Structure.Domain.Entities.Role", "Role")
                        .WithMany("AttentionModeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AttentionMode");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.ChangeTracking", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.Type", "ObjectType")
                        .WithMany("ChangeTracking")
                        .HasForeignKey("IdObjectType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureDomain", "Structure")
                        .WithMany("ChangeTrackingListItems")
                        .HasForeignKey("IdStructure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectType");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.ChangeTrackingStatus", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.ChangeTracking", "ChangeTracking")
                        .WithMany("ChangeTrackingStatusListItems")
                        .HasForeignKey("IdChangeTracking")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.Entities.State", "Status")
                        .WithMany("ChangeStatus")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeTracking");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.MotiveState", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.Motive", "Motive")
                        .WithMany("MotiveStates")
                        .HasForeignKey("MotiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.Entities.State", "State")
                        .WithMany("MotiveStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Motive");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.State", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.StateGroup", "StateGroup")
                        .WithMany("States")
                        .HasForeignKey("StateGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StateGroup");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StructureModel", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.Country", "Country")
                        .WithMany("StructureModels")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StructureModelDefinition", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.Level", "Level")
                        .WithMany("StructureModelsDefinitions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABI.API.Structure.Domain.Entities.Level", "ParentLevel")
                        .WithMany("ParentStructureModelsDefinitions")
                        .HasForeignKey("ParentLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ABI.API.Structure.Domain.Entities.StructureModel", "StructureModel")
                        .WithMany("StructureModelsDefinitions")
                        .HasForeignKey("StructureModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("ParentLevel");

                    b.Navigation("StructureModel");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Type", b =>
                {
                    b.HasOne("ABI.API.Structure.Domain.Entities.TypeGroup", "TypeGroup")
                        .WithMany("Types")
                        .HasForeignKey("TypeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypeGroup");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureDomain", b =>
                {
                    b.Navigation("AristaFrom");

                    b.Navigation("AristaTo");

                    b.Navigation("ChangeTrackingListItems");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.AggregatesModel.StructureAggregate.StructureNode", b =>
                {
                    b.Navigation("AristasFrom");

                    b.Navigation("AristasTo");

                    b.Navigation("StructureClientNodes");

                    b.Navigation("StructureNodoDefinitions");

                    b.Navigation("Structures");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.AttentionMode", b =>
                {
                    b.Navigation("AttentionModeRoles");

                    b.Navigation("StructureNodoDefinitions");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.ChangeTracking", b =>
                {
                    b.Navigation("ChangeTrackingStatusListItems");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Country", b =>
                {
                    b.Navigation("StructureModels");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Level", b =>
                {
                    b.Navigation("ParentStructureModelsDefinitions");

                    b.Navigation("StructureModelsDefinitions");

                    b.Navigation("StructureNodos");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Motive", b =>
                {
                    b.Navigation("MotiveStates");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.MotiveState", b =>
                {
                    b.Navigation("StructureAristas");

                    b.Navigation("StructureNodoDefinitions");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Role", b =>
                {
                    b.Navigation("AttentionModeRoles");

                    b.Navigation("StructureNodoDefinitions");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.SaleChannel", b =>
                {
                    b.Navigation("StructureNodoDefinitions");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.State", b =>
                {
                    b.Navigation("ChangeStatus");

                    b.Navigation("MotiveStates");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StateGroup", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.StructureModel", b =>
                {
                    b.Navigation("StructureModelsDefinitions");

                    b.Navigation("Structures");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.Type", b =>
                {
                    b.Navigation("ChangeTracking");

                    b.Navigation("StructureArista");
                });

            modelBuilder.Entity("ABI.API.Structure.Domain.Entities.TypeGroup", b =>
                {
                    b.Navigation("Types");
                });
#pragma warning restore 612, 618
        }
    }
}
